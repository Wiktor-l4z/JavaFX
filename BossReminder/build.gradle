import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
         classpath 'com.github.rholder:gradle-one-jar:1.0.4'
		 classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.3'
    }
}

apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'gradle-one-jar'
apply plugin: 'idea'
apply plugin: 'eclipse'

group="com.github.wiktor-l4z"
def mainClassName= "com.github.wiktor-l4z.Main"

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

repositories {
	mavenCentral()
	mavenLocal()
	}

dependencies {
	compile group: 'com.google.guava', name: 'guava', version: '18.0'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
	testCompile 'junit:junit:4.12'
	testCompile 'org.assertj:assertj-core:3.5.2'
}

task loadProperties {
	def home = System.properties['user.home']
	def fileProp = home + "/keystore/wiktorfx.gradle.properties";
	def fileKey = home + "/keystore/wiktorfx_keystore.jks"
	Properties props = new Properties()
	
	if (!file(fileProp).exists()) {
		if (!file(home + "/keystore").exists()) {
			file(home + "/keystore").mkdir()
		}
		if (file(fileProp).createNewFile()) {
			println "File " + fileProp + "Created"
			if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		        println "*** WINDOWS "
		        println "You should write properties on your own (rPass, storePass & wfx_key_url)"
		    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
		    	println "*** LINUX "
		    	props.setProperty("rPass", "$System.env.FM_SIGN_REL_PSWD")
		    	props.setProperty("storePass", "$System.env.FM_SIGN_STORE_PSWD")
		    	props.setProperty("wfx_key_url", "$System.env.FM_KEYSTORE")
		    	props.store(new FileOutputStream(fileProp), null)
		    }
		} else {
			println "Error creating file!"
		}
	}
	
	props.load(new FileInputStream(fileProp))
	project.ext.rPass = props.getProperty('rPass')
	project.ext.storePass = props.getProperty('storePass')
	project.ext.key_file_url = props.getProperty('wfx_key_url')
	
	def f = new File(fileKey)
	if (!f.exists()) {
		println key_file_url
		if (key_file_url != null) {
			new URL(key_file_url).withInputStream{ i -> f.withOutputStream{ it << i }};
		} else {
			println "no keystore file path provided in your keystore!"
		}
	}
}

build.dependsOn loadProperties

apply from: "http://dl.bintray.com/content/shemnon/javafx-gradle/8.1.1/javafx.plugin"

javafx {
    javaRuntime = System.properties['JAVA_HOME']
    appID 'wiktorfx'
    appName 'wiktorFx'
    mainClass = mainClassName
    
    jvmArgs = ['-XX:+AggressiveOpts', '-XX:CompileThreshold=1']
    systemProperties = ['prism.disableRegionCaching':'true']
    arguments = ['-l', '--fast']

    // Generate key: keytool -genkey -alias release -keyalg RSA -keystore keystore.jks -keysize 2048
    releaseKey {
        alias = 'release'
        keyPass = getProjectProperty('rPass')
        keyStore = file("${System.properties['user.home']}/keystore/*_keystore.jks")
		println "KeyStore file: "+keyStore.path
        storePass = getProjectProperty('storePass')
    }
    
    signingMode 'release'
}

String getProjectProperty(String propertyName) {
    project.hasProperty(propertyName) ? project.property(propertyName) : null
}

jar {
	manifest {
		attributes 'Main-Class': mainClassName
		attributes "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
	}
}

task pmd  { 
	doLast {
		println 'Running PMD static code analysis'
		ant {
			taskdef(name:'pmd', classname:'net.sourceforge.pmd.ant.PMDTask', classpath: configurations.pmdConf.asPath)

			pmd(shortFilenames:'true', failonruleviolation:'true', rulesetfiles:'conf/pmd-rules.xml') {
				formatter(type:'csv', tofile:'myreport.csv', toConsole:'true')
				fileset(dir: "src/main/java") {
					include(name: '**/*.java')
				}
				fileset(dir: "src/test/java") {
					include(name: '**/*.java')
				}        
			}
		}
}
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}